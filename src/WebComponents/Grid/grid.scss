/**
 * Copyright 2015 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Based on https://github.com/google/material-design-lite/blob/master/src/grid/_grid.scss
 * Changes:
 * - Refactored for webcomponents :host styling
 * - Renamed prefix from mdl to vi
 */

/*
* NOTE: Some rules here are applied using duplicate selectors.
* This is on purpose to increase their specificity when applied.
* For example: `.vi-grid-cell--1-col-phone.vi-grid-cell--1-col-phone`
*/

$grid-desktop-columns: 12 !default;
$grid-desktop-gutter: 12px !default;
$grid-desktop-margin: 12px !default;

$grid-desktop-breakpoint: 840px !default;

$grid-tablet-columns: 8 !default;
$grid-tablet-gutter: $grid-desktop-gutter !default;
$grid-tablet-margin: $grid-desktop-margin !default;

$grid-tablet-breakpoint: 480px !default;

$grid-phone-columns: 4 !default;
$grid-phone-gutter: $grid-desktop-gutter !default;
$grid-phone-margin: $grid-desktop-margin !default;

$grid-cell-default-columns: $grid-phone-columns !default;
$grid-max-columns: $grid-desktop-columns !default;

:host {
    display: block;
    display: flex;
    flex-flow: row wrap;
    align-items: stretch;

    &[no-spacing] {
        padding: 0;

        ::content > .vi-grid-cell {
            margin: 0;
        }
    }

    ::content > {
        .vi-grid-cell {
            box-sizing: border-box;
        }

        .vi-grid-cell--top {
            align-self: flex-start;
        }

        .vi-grid-cell--middle {
            align-self: center;
        }

        .vi-grid-cell--bottom {
            align-self: flex-end;
        }

        .vi-grid-cell--stretch {
            align-self: stretch;
        }
        // Define order override classes.
        @for $i from 1 through $grid-max-columns {
            .vi-grid-cell--order-#{$i} {
                order: $i;
            }
        }
    }
}

// Mixins for width calculation.
@mixin partial-size($size, $columns, $gutter) {
    :host ::content > & {
        width: calc(#{(($size / $columns) * 100)+"%"} - #{$gutter});
    }

    :host[no-spacing] ::content > & {
        width: #{(($size / $columns) * 100)+"%"};
    }
}

@mixin full-size($gutter) {
    @include partial-size(1, 1, $gutter);
}

@mixin offset-size($size, $columns, $gutter) {
    :host ::content > & {
        margin-left: calc(#{(($size / $columns) * 100)+"%"} + #{$gutter / 2});
    }

    :host[no-spacing] ::content > & {
        margin-left: #{(($size / $columns) * 100)+"%"};
    }
}

////////// Phone //////////
@media (max-width: $grid-tablet-breakpoint - 1) {
    :host {
        padding: $grid-phone-margin - ($grid-phone-gutter / 2);
    }

    :host ::content > {
        .vi-grid-cell {
            margin: $grid-phone-gutter / 2;
        }

        .vi-grid-cell--hide-phone {
            display: none !important;
        }
        // Define order override classes.
        @for $i from 1 through $grid-max-columns {
            .vi-grid-cell--order-#{$i}-phone.vi-grid-cell--order-#{$i}-phone {
                order: $i;
            }
        }
    }

    .vi-grid-cell {
        @include partial-size($grid-cell-default-columns, $grid-phone-columns, $grid-phone-gutter);
    }

    // Define partial sizes for columnNumber < totalColumns.
    @for $i from 1 through ($grid-phone-columns - 1) {
        .vi-grid-cell--#{$i}-col,
        .vi-grid-cell--#{$i}-col-phone.vi-grid-cell--#{$i}-col-phone {
            @include partial-size($i, $grid-phone-columns, $grid-phone-gutter);
        }
    }
    // Define 100% for everything else.
    @for $i from $grid-phone-columns through $grid-desktop-columns {
        .vi-grid-cell--#{$i}-col,
        .vi-grid-cell--#{$i}-col-phone.vi-grid-cell--#{$i}-col-phone {
            @include full-size($grid-phone-gutter);
        }
    }
    // Define valid phone offsets.
    @for $i from 1 through ($grid-phone-columns - 1) {
        .vi-grid-cell--#{$i}-offset,
        .vi-grid-cell--#{$i}-offset-phone.vi-grid-cell--#{$i}-offset-phone {
            @include offset-size($i, $grid-phone-columns, $grid-phone-gutter);
        }
    }
}

////////// Tablet //////////
@media (min-width: $grid-tablet-breakpoint) and (max-width: $grid-desktop-breakpoint - 1) {
    :host {
        padding: $grid-tablet-margin - ($grid-tablet-gutter / 2);
    }

    :host ::content > {
        .vi-grid-cell {
            margin: $grid-tablet-gutter / 2;
        }

        .vi-grid-cell--hide-tablet {
            display: none !important;
        }
        // Define order override classes.
        @for $i from 1 through $grid-max-columns {
            .vi-grid-cell--order-#{$i}-tablet.vi-grid-cell--order-#{$i}-tablet {
                order: $i;
            }
        }
    }

    .vi-grid-cell {
        @include partial-size($grid-cell-default-columns, $grid-tablet-columns, $grid-tablet-gutter);
    }

    // Define partial sizes for columnNumber < totalColumns.
    @for $i from 1 through ($grid-tablet-columns - 1) {
        .vi-grid-cell--#{$i}-col,
        .vi-grid-cell--#{$i}-col-tablet.vi-grid-cell--#{$i}-col-tablet {
            @include partial-size($i, $grid-tablet-columns, $grid-tablet-gutter);
        }
    }
    // Define 100% for everything else.
    @for $i from $grid-tablet-columns through $grid-desktop-columns {
        .vi-grid-cell--#{$i}-col,
        .vi-grid-cell--#{$i}-col-tablet.vi-grid-cell--#{$i}-col-tablet {
            @include full-size($grid-tablet-gutter);
        }
    }
    // Define valid tablet offsets.
    @for $i from 1 through ($grid-tablet-columns - 1) {
        .vi-grid-cell--#{$i}-offset,
        .vi-grid-cell--#{$i}-offset-tablet.vi-grid-cell--#{$i}-offset-tablet {
            @include offset-size($i, $grid-tablet-columns, $grid-tablet-gutter);
        }
    }
}

////////// Desktop //////////
@media (min-width: $grid-desktop-breakpoint) {
    :host {
        padding: $grid-desktop-margin - ($grid-desktop-gutter / 2);
    }

    :host ::content > {
        .vi-grid-cell {
            margin: $grid-desktop-gutter / 2;
        }

        .vi-grid-cell--hide-desktop {
            display: none !important;
        }
        // Define order override classes.
        @for $i from 1 through $grid-max-columns {
            .vi-grid-cell--order-#{$i}-desktop.vi-grid-cell--order-#{$i}-desktop {
                order: $i;
            }
        }
    }

    // Define partial sizes for all numbers of columns.
    @for $i from 1 through $grid-desktop-columns {
        .vi-grid-cell--#{$i}-col,
        .vi-grid-cell--#{$i}-col-desktop.vi-grid-cell--#{$i}-col-desktop {
            @include partial-size($i, $grid-desktop-columns, $grid-desktop-gutter);
        }
    }

    // Define valid desktop offsets.
    @for $i from 1 through ($grid-desktop-columns - 1) {
        .vi-grid-cell--#{$i}-offset,
        .vi-grid-cell--#{$i}-offset-desktop.vi-grid-cell--#{$i}-offset-desktop {
            @include offset-size($i, $grid-desktop-columns, $grid-desktop-gutter);
        }
    }
}